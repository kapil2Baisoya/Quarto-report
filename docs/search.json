[
  {
    "objectID": "unicef_report.html",
    "href": "unicef_report.html",
    "title": "UNICEF Education Completion: Story & Visualisations",
    "section": "",
    "text": "This notebook reproduces the four key visualisations from the Tableau dashboard, using plotnine and geopandas. All narrative text is taken directly from the original story.\n\n1. Understanding Global Education Completion Rates\nEducation Completion Rate Map\nThis choropleth map visualises global education completion rates (%) by country. Darker red hues indicate higher completion percentages, while lighter shades denote lower performance.\nYou can clearly see that South American nations and developed economies in Europe exhibit the highest rates, whereas many Sub‑Saharan African countries and parts of South Asia remain in the lower bands.\nKey Takeaways:\n- Regional Disparities: The lowest completion rates are concentrated in Sub‑Saharan Africa and South Asia.\n- Policy Focus: Prioritise investment in educational infrastructure, teacher training and access initiatives in underperforming regions. ———-\n\n\nCode\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nfrom plotnine import *\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nimport pycountry\n\n# 1) Load UNICEF data\nind1 = pd.read_csv('data/unicef_indicator_1 (1).csv')\nind2 = pd.read_csv('data/unicef_indicator_2 (1).csv')\nmeta = pd.read_csv('data/unicef_metadata (1).csv')\n\n# 2) Prepare completion-rate DataFrame\ncomp = ind2[ind2['indicator'].str.contains('Completion rate', na=False)].copy()\ncomp['obs_value'] = pd.to_numeric(comp['obs_value'], errors='coerce')\n\nfem = comp[comp['sex']=='Female'] \\\n        .rename(columns={'obs_value':'completion_rate'}) \\\n        .assign(Gender='Female')\nmal = comp[comp['sex']=='Male'] \\\n        .rename(columns={'obs_value':'completion_rate'}) \\\n        .assign(Gender='Male')\ntot = comp[comp['sex']=='Total'] \\\n        .rename(columns={'obs_value':'completion_rate'}) \\\n        .assign(Gender='Total')\n\ndf         = pd.concat([fem, mal],       ignore_index=True)\ndf_all     = pd.concat([fem, mal, tot],  ignore_index=True)\ndf['year'] = pd.to_numeric(df['time_period'],      errors='coerce')\ndf_all['year'] = pd.to_numeric(df_all['time_period'], errors='coerce')\n\ndf     = df.dropna(subset=['country','alpha_3_code','year','completion_rate'])\ndf_all = df_all.dropna(subset=['country','alpha_3_code','year','completion_rate'])\n\n# 3) Latest total completion per country\nlatest_year  = df_all[df_all['Gender']=='Total'] \\\n                  .groupby('country')['year'] \\\n                  .max().reset_index()\ntotal_latest = pd.merge(df_all, latest_year,\n                        on=['country','year'], how='inner')\n\n# 4) Global average by year/gender\nts = df.groupby(['year','Gender'])['completion_rate'] \\\n       .mean().reset_index()\n\n# 5) Top 15 countries\ntop15 = ( total_latest\n            .sort_values('completion_rate', ascending=False)\n            .head(15)\n            .sort_values('completion_rate') )\n\n# Alternative approach for mapping without using geom_map\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nimport requests\nimport tempfile\nimport zipfile\nimport io\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Function to get world map data\ndef get_world_map():\n    \"\"\"Download and read the Natural Earth low resolution cultural vectors\"\"\"\n    try:\n\n        return gpd.read_file(\"ne_110m_admin_0_countries.shp\")\n    except:\n        # If file doesn't exist, download it\n        url = \"https://naciscdn.org/naturalearth/110m/cultural/ne_110m_admin_0_countries.zip\"\n        # print(\"Downloading Natural Earth data...\")\n\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n\n            with tempfile.TemporaryDirectory() as tmpdir:\n                # Extract the zipfile\n                with zipfile.ZipFile(io.BytesIO(response.content)) as z:\n                    z.extractall(tmpdir)\n\n                shp_file = [f for f in os.listdir(tmpdir) if f.endswith('.shp')][0]\n                shp_path = os.path.join(tmpdir, shp_file)\n                world = gpd.read_file(shp_path)\n                world.to_file(\"ne_110m_admin_0_countries.shp\")\n                return world\n        except Exception as e:\n            # print(f\"Error downloading or extracting map data: {e}\")\n\n            # Create a very simple world map as fallback\n            # print(\"Creating a simplified world map...\")\n            world = gpd.GeoDataFrame(\n                {'name': ['World'],\n                 'ISO_A3': ['WLD'],\n                 'geometry': [None]},\n                crs=\"EPSG:4326\"\n            )\n            return world\n\n# Get the world map\nworld = get_world_map()\n\n# Prepare the map for joining\navailable_columns = world.columns.tolist()\n# print(f\"Available columns in the world map data: {available_columns}\")\n\n# Based on the available columns, we can see 'ISO_A3' exists\n# Let's use that for our join\nif 'ISO_A3' in available_columns:\n    join_column = 'ISO_A3'\nelse:\n    # Fallback to another column if needed\n    possible_columns = ['iso_a3', 'ADM0_A3', 'BRK_A3', 'SU_A3', 'GU_A3']\n    join_column = next((col for col in possible_columns if col in available_columns), None)\n\n    if not join_column:\n        # print(\"Could not find a suitable ISO code column. Using the first column as fallback.\")\n        join_column = available_columns[0]\n\n# print(f\"Using column '{join_column}' for joining with country data\")\n\n# For test purposes, create a simple dataframe if total_latest doesn't exist\ntry:\n    # Check if total_latest exists from previous code\n    total_latest.shape\n    # print(f\"Shape of total_latest: {total_latest.shape}\")\nexcept NameError:\n    # Create sample data for testing\n    # print(\"Creating sample data for map visualization...\")\n    countries = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Argentina']\n    codes3 = ['AFG', 'ALB', 'DZA', 'AGO', 'ARG']\n    completion_rates = [45.6, 78.9, 65.4, 32.1, 89.5]\n\n    total_latest = pd.DataFrame({\n        'country': countries,\n        'alpha_3_code': codes3,\n        'completion_rate': completion_rates\n    })\n\n# Create a copy of the completion rate data\ncompletion_data = total_latest[['country', 'alpha_3_code', 'completion_rate']].copy()\n\n# Merge the data with world map\nworld_copy = world.copy()\nworld_copy = world_copy.rename(columns={join_column: 'alpha_3_code'})\n\n# Merge the data\nmerged_data = world_copy.merge(completion_data, on='alpha_3_code', how='left')\n\n# Print diagnostic information\n# print(f\"World shape: {world.shape}\")\n# print(f\"Completion data shape: {completion_data.shape}\")\n# print(f\"Merged data shape: {merged_data.shape}\")\n# print(f\"Number of non-NaN completion rates: {merged_data['completion_rate'].notna().sum()}\")\n\n# Create a custom colormap from light pink to dark green\ncolors = ['#fee5d9', '#fdcc8a', '#fc8d59', '#d7301f', '#b30000', '#7f0000']\ncmap = LinearSegmentedColormap.from_list('custom_cmap', colors, N=256)\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\n\n# Plot countries without data\nmerged_data[merged_data['completion_rate'].isna()].plot(\n    color='lightgray',\n    ax=ax,\n    edgecolor='white',\n    linewidth=0.2\n)\n\n# Plot countries with data\nmerged_data[merged_data['completion_rate'].notna()].plot(\n    column='completion_rate',\n    cmap=cmap,\n    ax=ax,\n    edgecolor='white',\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={'label': 'Completion Rate (%)',\n                'orientation': 'horizontal',\n                'shrink': 0.6,\n                'pad': 0.01}\n)\n\n# Add title and remove axis ticks\nax.set_title('Education Completion Rate Map', fontsize=16)\nax.set_axis_off()\n\n\n# Save the figure\nplt.savefig('education_completion_map.png', dpi=150, bbox_inches='tight')\n# print(\"Map saved as 'education_completion_map.png'\")\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n2. Gender Gap in Education Completion\nEducation Completion Rate by Country (Male vs Female)\nThis bar chart compares male (blue) and female (red) completion rates for a selection of countries. Some countries (e.g. Belarus, Ukraine) show near‑perfect parity, while others (e.g. Barbados) exhibit small but measurable gaps favouring one gender.\nKey Takeaways:\n- Variable Gender Gaps: Although many countries achieve parity, socio‑cultural barriers still hinder female completion in certain contexts.\n- Actionable Measures: Introduce scholarships for girls, community outreach programmes and safe school environments to close remaining gaps.\n\n\nCode\n# Plot 2: Bar chart of completion by country (male vs female)\ngender_data = df[df['country'].isin(top15['country'])]\nbar_df = (gender_data\n          .groupby(['country', 'Gender'])\n          .completion_rate.mean()\n          .reset_index())\n\ntry:\n    bar_plot = (ggplot(bar_df)\n     + aes(x='completion_rate', y='country', fill='Gender')\n     + geom_col(position='dodge')\n     + scale_fill_manual(values={'Male': '#3182bd', 'Female': '#de2d26'})\n     + labs(title='Education Completion Rate by Country (Male vs Female)',\n            x='Completion Rate (%)', y='')\n     + theme_minimal()\n    )\n\n    print(\"\\nPlot 2: Gender Comparison by Country\")\n    display(bar_plot.draw())\nexcept Exception as e:\n    print(f\"Error creating bar chart: {e}\")\n    print(\"Skipping bar chart visualization. Continuing with other plots...\")\n\n\n\nPlot 2: Gender Comparison by Country\n\n\n\n\n\n\n\n\n\n\n\n3. Trends in Education Completion Over Time\nEducation Completion Trends Over Time (2010–2020)\nThis line graph tracks the global average completion rate from 2010 to 2020 for both males (blue) and females (red). After rapid early gains (2010–2012), rates dipped around 2013 before a steady recovery and a pronounced surge by 2020.\nKey Takeaways:\n- Overall Improvement: Both genders show significant progress over the decade, with female rates often matching or outpacing male trends.\n- Stability Imperative: Fluctuations suggest sensitivity to economic or political shocks; sustained funding and resilience strategies are crucial.\n\n\n\nCode\n# Plot 3: Time-series of completion trend\nyears_with_data = ts.groupby('year').filter(lambda x: len(x) &gt;= 2)['year'].unique()\nts_filtered = ts[ts['year'].isin(years_with_data)]\n\ntry:\n    time_plot = (ggplot(ts_filtered)\n     + aes(x='year', y='completion_rate', color='Gender')\n     + geom_line(size=1.2)\n     + geom_point(size=2)\n     + scale_color_manual(values={'Male': '#3182bd', 'Female': '#de2d26'})\n     + labs(title='Education Completion Trends Over Time',\n            x='Year', y='Global Average Completion Rate (%)')\n     + theme_minimal()\n    )\n\n    print(\"\\nPlot 3: Completion Rate Trends Over Time\")\n    display(time_plot.draw())\nexcept Exception as e:\n    print(f\"Error creating time series plot: {e}\")\n    print(\"Skipping time series visualization. Continuing with other plots...\")\n\n\n\nPlot 3: Completion Rate Trends Over Time\n\n\n\n\n\n\n\n\n\n\n\n4. Impact of GDP on Education Completion\nGDP vs. Education Completion Rate\nThis scatter plot, complete with a fitted regression line and confidence band, examines the relationship between GDP per capita (constant 2015 US$) and completion rates. The strong upward trend demonstrates that wealthier economies tend to achieve higher educational outcomes.\nKey Takeaways:\n- Positive Correlation: Countries with GDP per capita above US$10,000 generally exceed 60 % completion, highlighting the role of financial investment.\n- Policy Recommendation: Embed education spending within broader economic planning—ensure a stable share of GDP supports schools, teachers and learning resources.\n\n\n\nCode\n# Plot 4: Scatterplot GDP vs Completion with regression\ngdp_col = 'GDP per capita (constant 2015 US$)'\nif gdp_col in meta.columns:\n    gdp_data = meta[['country', 'alpha_3_code', 'year', gdp_col]]\n    gdp_data = gdp_data.rename(columns={'year': 'year_gdp'})\n    gdp_data[gdp_col] = pd.to_numeric(gdp_data[gdp_col], errors='coerce')\n\n    # For each country in total_latest, find the closest year in gdp_data\n    try:\n        # Try merge_asof first\n        gdp_df = pd.merge_asof(\n            total_latest.sort_values('year'),\n            gdp_data.sort_values('year_gdp'),\n            left_on='year',\n            right_on='year_gdp',\n            by=['country', 'alpha_3_code'],\n            direction='nearest'\n        )\n    except Exception as e:\n        print(f\"Error with merge_asof: {e}\")\n        # Fall back to regular merge\n        gdp_df = pd.merge(\n            total_latest,\n            gdp_data,\n            on=['country', 'alpha_3_code'],\n            how='inner'\n        )\n\n    # Drop rows with missing GDP\n    gdp_df = gdp_df.dropna(subset=[gdp_col])\n\n    try:\n        scatter_plot = (ggplot(gdp_df)\n         + aes(x=gdp_col, y='completion_rate')\n         + geom_point(size=2, alpha=0.6)\n         + stat_smooth(method='lm', se=True, color='black')\n         + labs(title='GDP vs. Education Completion Rate',\n                x='GDP per capita (constant 2015 US$)',\n                y='Completion Rate (%)')\n         + theme_minimal()\n        )\n\n        print(\"\\nPlot 4: GDP vs Completion Rate\")\n        display(scatter_plot.draw())\n    except Exception as e:\n        print(f\"Error creating scatter plot: {e}\")\n        print(\"Skipping GDP scatter plot visualization.\")\nelse:\n    print(f\"\\nGDP data column '{gdp_col}' not found in metadata. Skipping GDP scatter plot.\")\n    # Create a simple gdp vs completion scatterplot with synthetic data\n    print(\"Creating synthetic GDP data for demonstration purposes...\")\n    total_latest['gdp_per_capita'] = total_latest['completion_rate'] * 500 + np.random.normal(5000, 2000, len(total_latest))\n\n    try:\n        scatter_plot = (ggplot(total_latest)\n         + aes(x='gdp_per_capita', y='completion_rate')\n         + geom_point(size=2, alpha=0.6)\n         + stat_smooth(method='lm', se=True, color='black')\n         + labs(title='GDP vs. Education Completion Rate (Synthetic Data)',\n                x='GDP per capita (synthetic)',\n                y='Completion Rate (%)')\n         + theme_minimal()\n        )\n\n        print(\"\\nPlot 4: GDP vs Completion Rate (with synthetic GDP data)\")\n        display(scatter_plot.draw())\n    except Exception as e:\n        print(f\"Error creating synthetic scatter plot: {e}\")\n\n\n\nPlot 4: GDP vs Completion Rate"
  }
]